// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import java.util.*;
import java.util.stream.Collectors;

import com.mendix.core.Core;

public class process_data extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.util.List<IMendixObject> __fa_List;
	private java.util.List<myfirstmodule.proxies.api_model> fa_List;
	private java.util.List<IMendixObject> __smt_List;
	private java.util.List<myfirstmodule.proxies.api_model> smt_List;
	private java.util.List<IMendixObject> __istock_List;
	private java.util.List<myfirstmodule.proxies.api_model> istock_List;

	public process_data(IContext context, java.util.List<IMendixObject> fa_List, 
    java.util.List<IMendixObject> smt_List, java.util.List<IMendixObject> istock_List)
	{
		super(context);
		this.__fa_List = fa_List;
		this.__smt_List = smt_List;
		this.__istock_List = istock_List;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.fa_List = java.util.Optional.ofNullable(this.__fa_List)//2w
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__fa_ListElement -> myfirstmodule.proxies.api_model.initialize(getContext(), __fa_ListElement))
			.collect(java.util.stream.Collectors.toList());

		this.smt_List = java.util.Optional.ofNullable(this.__smt_List)//20w
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__smt_ListElement -> myfirstmodule.proxies.api_model.initialize(getContext(), __smt_ListElement))
			.collect(java.util.stream.Collectors.toList());

		this.istock_List = java.util.Optional.ofNullable(this.__istock_List)//8k
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__istock_ListElement -> myfirstmodule.proxies.api_model.initialize(getContext(), __istock_ListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
		//throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Java action was not implemented");
		
        IContext context = this.getContext();
        //ILogNode logger = Core.getLogger("Java_action");
		
		System.out.println("-------------------------------");
		System.out.println(this.smt_List.getClass().getName());
		System.out.println("-------------------------------");

		HashMap<String, Integer> iStockSumm = new HashMap<>();
        for (myfirstmodule.proxies.api_model obj : istock_List) {
            String key = obj.getProductpartno();
            if (!iStockSumm.containsKey(key)) {
                iStockSumm.put(key, 0);
            } 
            iStockSumm.put(key, iStockSumm.get(key) + obj.getGoodpartquantity());
        }


        //logger.info("iStockSumm mapped data: " + iStockSumm.toString());		


		HashMap<String, String> faDMCDistinct = new HashMap<>();
		HashMap<String, Integer> partNoCount = new HashMap<>();
		for (myfirstmodule.proxies.api_model obj : fa_List) {
            String dmc = obj.getUniquepart_id();
			String partNo = obj.getType_number();
            if (!faDMCDistinct.containsKey(dmc)) {
                faDMCDistinct.put(dmc, partNo);
            } 
			if (!partNoCount.containsKey(partNo)) {
				partNoCount.put(partNo, 0);
			}
			partNoCount.put(partNo, partNoCount.get(partNo) + 1);
        }

		//赋值
		
		//logger.info("faDMCDistinct mapped data: " + faDMCDistinct.toString());	

		HashMap<String, Integer> smtResult = new HashMap<>();
		for (myfirstmodule.proxies.api_model obj : smt_List) {
			String dmc = obj.getUniquepart_id();
			Integer resultState = obj.getResult_state();
			if (!smtResult.containsKey(dmc)) {
				smtResult.put(dmc, resultState);
			}
		}
		//logger.info("smtResult mapped data: " + smtResult.toString());---------------------------------------

		HashMap<String, Integer> fa_smt_count = new HashMap<>();
		for (Map.Entry<String, String> entry : faDMCDistinct.entrySet()) {
			String dmc = entry.getKey();
			String partNo = entry.getValue();
			if (!fa_smt_count.containsKey(partNo)) {
				fa_smt_count.put(partNo, 0);
			}
			if (!smtResult.containsKey(dmc)) {
				continue;
			}
			Integer resultState = smtResult.get(dmc);
			if (resultState != 1) continue;
			fa_smt_count.put(partNo, fa_smt_count.get(partNo) + 1);
		}
		//logger.info("fa_smt_count mapped data: " + fa_smt_count.toString());

		List<myfirstmodule.proxies.Result> results = new ArrayList<>();
		for (Map.Entry<String, Integer> entry : partNoCount.entrySet()) {
			String partNo = entry.getKey();
			Integer count = entry.getValue();
			myfirstmodule.proxies.Result result = myfirstmodule.proxies.Result.initialize(context,  
            Core.instantiate(context, myfirstmodule.proxies.Result.entityName));
            
			result.setType_number(partNo);
			result.setfa_qty(count);

			Integer iStockQty = iStockSumm.get(partNo);
			result.seti_stock_qty(iStockQty);
			Integer smtQty = fa_smt_count.get(partNo);
			result.setsmt_qty(smtQty);

			Integer diff = iStockQty - smtQty;
			result.setdiff(diff);
			results.add(result);
		}
		//logger.info("results geted");

		List<IMendixObject> res = new ArrayList<>();
        results.forEach(obj -> {
            res.add(obj.getMendixObject());
        });

		return res;
		//--------------------------------------------------------------?
        
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "process_data";
	}

	// BEGIN EXTRA CODE
	public class MesData 
	{
    public String Uniquepart_id;
	public String Location_id;
    public String Type_number;
    public String Productpartno;
    public int qty;
    public int Goodpartquantity;
    public int Result_state;
	
    // 添加getter和setter方法
    }
	
	
	public class ResultData 
	{
    public String Type_number;
    public int fa_qty;
    public int i_stock_qty;
    public int diff;

    // 添加getter和setter方法
    }
	
	// END EXTRA CODE
}